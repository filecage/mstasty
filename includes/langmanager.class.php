<?php    /***************************************************    *    __  __    _____         _           ____      *    *   |  \/  |__|_   _|_ _ ___| |_ _   _  |___ \     *    *   | |\/| / __|| |/ _` / __| __| | | |   __) |    *    *   | |  | \__ \| | (_| \__ \ |_| |_| |  / __/     *    *   |_|  |_|___/|_|\__,_|___/\__|\__, | |_____|    *    *                                |___/             *    *   MsTasty Core 2                                 *    *   http://github.com/filecage/mstasty             *    *                                                  *    *   This software is licensed under GNU GPL.       *    *   You can use, edit and redistribute it for free *    *   For further information see the LICENSE.txt in *    *   the license-directory. You should also check   *    *   the WARRANTY.txt in the same directory when    *    *   changing or using this software.               *    *                                                  *    *   When making changes, please do not remove this *    *   mark as we spent a lot of time creating this   *    *   software.                                      *    *                                                  *    ***************************************************/        class LangManager {            // set var for later storage        private $lang_store;                public function __construct ( $default_lang, $multi_lang = false ) {                    if ( empty ( $default_lang ) ) {                            // if no default language is given, remember for later error and set default (CORE_EN)                $set_bad_lang      = true;                $default_lang      = 'CORE_EN';                            }                        // set language file            $default_lang_file = $default_lang . '.lang.php';                            // check wether it exists or not            if ( file_exists ( LANG_PATH . $default_lang_file ) ) {                                // check wether you can require it or not                require_once ( LANG_PATH . $default_lang_file );                                // if we didn't die until this point it means that the language has been successfully loaded, so we can start using languages                $this -> lang_store [ $default_lang ] = $translation;                define ( 'GLOBAL_LANG' ,     $default_lang );                define ( 'GLOBAL_LANG_NAME', $translation ['CORE']['LANG_NAME'] );                                aout( $translation [ 'CORE' ] [ 'LANG_INIT' ] );                            }                        else {                            // if we detected earlier that there is no config-entry for the language, echo a warning.                // this plaintext-warning only appears if we failed loading a language. Otherwise it's defined in the languagefile.                                if ( $set_bad_lang ) {                                    out('Warning: No language file set in config. Falling back to default value CORE_EN.');                                    }                            // Tell the botowner that something went terribly wrong                die ( 'Fatal engine error: Could not read language file, file could not be found. (' . LANG_PATH . $default_lang_file . ')' );exit;                          }        }                public function parse_term ( $trm, $opt=false ) {            global $core;                           // check if we only got one variable (and transform to array if yes)            if ( !is_array ( $opt ) && $opt !== false && !empty ( $opt ) ) {                            $opt = array ( $opt );                            }                        // check wether we got a different parent            $trm_arr = explode ( '::', $trm );                                    if ( count ( $trm_arr ) > 1 ) {                            // if we got one, do not use CORE-parent                $ret = $this -> lang_store [ GLOBAL_LANG ] [ $trm_arr[0] ] [ $trm_arr[1] ];                            }            else {                        // if not, use CORE-parent                $ret = $this -> lang_store [ GLOBAL_LANG ] [ 'CORE' ] [ $trm ];                            }                        // replace possible %%vars%%            $ret = str_replace ( '%%nick%%', IRCCore::mvar ( 'nick' ), $ret );            // find all %vars%            if ( preg_match_all ( '/%([^%\s]+)%/', $ret, $match ) && is_array( $opt ) ) {                            foreach ( $match[1] as $key => $var_name ) {                                    // when giving var-values, you can either give each a name (which would be array('foo'=>'bar');)                    if ( !isset ( $opt [ $var_name ] ) ) {                                            $opt_val = $opt [ $key ];                                            }                    else {                                            // or as a numeric list, which would be array('foo','bar'); (occurs as 0=>foo,1=>bar, etc.)                        $opt_val = $opt [ $var_name ];                                            }                                    // replace the found var with the given value                    $ret = str_replace ( '%' . $var_name . '%', $opt_val, $ret );                                    }                                return $ret;                            }            else {                            return $ret;                            }                }        }    ?>